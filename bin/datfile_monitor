#!/usr/bin/env python3
import argparse
import os

import matplotlib.animation as animation
import matplotlib.pyplot as plt

from pandasfoam.helpers import load_dat

def parse_arguments():
    parser = argparse.ArgumentParser(
        description='''Monitor data using matplotlib.''',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('file_path', metavar='FILE',
                        type=str,
                        help="path to file, format 'path/to/file.dat'")
    parser.add_argument('-t', '--title',
                        type=str,
                        help='set the graph title explicitly')
    parser.add_argument('-st', '--subtitle',
                        type=str, default=None,
                        help='set the graph subtitle')
    parser.add_argument('-l', '--logscale',
                        action='store_true',
                        help='''plots data (y-axis) on log scale
                                - for "residuals.dat" sets automatically''')
    parser.add_argument('-r', '--refresh',
                        type=int, default=10,
                        help='refreshes display every <time> sec')

    return parser.parse_args()


def plot(ax, args) -> None:
    """Draw plot."""

    # Set plot subtitle
    ax.title.set_text(args.subtitle)

    # Read data as dataframe
    df = load_dat(args.file_path)

    # Plot every column of dataframe
    for column in df:
        ax.plot(df[column], label=column)

    # Set subplot parameters
    ax.grid(True)
    ax.legend(loc='best', fontsize=12)
    ax.tick_params(axis='both', labelsize=12)
    ax.set_xlabel(df.index.name, fontsize=12)

    if args.logscale or os.path.basename(args.file_path) == 'residuals.dat':
        ax.set_yscale('log')


def main() -> None:
    # Read arguments from the command line
    args = parse_arguments()

    # Stop the program if there is no file
    # if not os.path.isfile(args.file_path):
    #     exit('[Errno 1] No such file or directory: ' + str(args.file_path))

    # Get a file name without extension
    if not args.title:
        args.title = os.path.splitext(os.path.basename(args.file_path))[0]

    # Create figure
    fig = plt.figure(figsize=(10, 6))
    fig.suptitle(args.title, fontweight='bold', fontsize=16)
    ax = fig.add_subplot()

    def animate(counter: int) -> None:
        ax.clear()
        plot(ax, args)

    plot(ax, args)
    if args.refresh:
        ani = animation.FuncAnimation(fig, animate, interval=args.refresh*1e+3)

    plt.show()


if __name__ == '__main__':
    main()
