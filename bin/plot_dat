#!/usr/bin/env python3
import argparse
from pathlib import Path

import matplotlib.animation as animation
import matplotlib.pyplot as plt
from pandasfoam.helpers import load_dat


def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Monitor data using matplotlib.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('file', metavar='FILE',
                        type=Path,
                        help='path to file')
    parser.add_argument('-t', '--title',
                        type=str,
                        help='graph title - file name without extension by default')
    parser.add_argument('-st', '--subtitle',
                        type=str,
                        help='graph subtitle')
    parser.add_argument('-l', '--logscale',
                        action='store_true',
                        help='plots data (y-axis) on log scale'
                             ' - for "residuals.dat" sets automatically')
    parser.add_argument('-r', '--refresh',
                        type=int, default=10,
                        help='refreshes display every <time> sec')

    return parser.parse_args()


def plot(ax, args) -> None:
    """Draw plot."""

    # Set plot subtitle
    ax.title.set_text(args.subtitle)

    # Read data as dataframe
    df = load_dat(args.file)

    # Plot every column of dataframe
    for key in df:
        ax.plot(df[key], label=key)

    # Set subplot parameters
    ax.grid(True)
    ax.legend(loc='best')
    ax.tick_params(axis='both')
    ax.set_xlabel(df.index.name)

    if args.logscale or Path(args.file).name == 'residuals.dat':
        ax.set_yscale('log')


def main() -> None:
    # Read arguments from the command line
    args = parse_arguments()

    # Set a title
    args.title = Path(args.file).name if not args.title else args.title

    # Create figure
    fig = plt.figure(figsize=(10, 6))
    fig.suptitle(args.title, fontweight='bold', fontsize=16)
    ax = fig.add_subplot()

    def animate(counter: int) -> None:
        ax.clear()
        plot(ax, args)

    plot(ax, args)
    if args.refresh:
        animation.FuncAnimation(fig, animate, interval=args.refresh*1e+3)

    plt.show()


if __name__ == '__main__':
    main()
