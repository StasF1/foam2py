#!/usr/bin/env python3
import argparse
from pathlib import Path

import matplotlib.animation as animation
import matplotlib.pyplot as plt
from pandasfoam.helpers import load_dat


class ArgementsHandler():
    def __init__(self) -> None:
        parser = argparse.ArgumentParser(
            description='Monitor data using matplotlib.',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

        parser.add_argument('file', metavar='FILE',
                            type=Path,
                            help='path to file')

        parser.add_argument('-t', '--title',
                            type=str,
                            help='graph title - OpenFOAM case name by default')
        parser.add_argument('-st', '--subtitle',
                            type=str,
                            help='graph subtitle - .dat file name without'
                                 ' extension by default')
        parser.add_argument('-l', '--logscale',
                            action='store_true',
                            help='plots data (y-axis) on log scale - for'
                                 ' "residuals.dat" sets automatically')
        parser.add_argument('-r', '--refresh',
                            type=int, default=10,
                            help='refreshes display every <time> sec')
        parser.add_argument('-uc', '--usecols',
                            type=int, nargs='+',
                            help='column indices (using header in .dat-file)'
                                 ' to plot')
        parser.add_argument('-b', '--background',
                            action='store_true',
                            help='open in background mode - save .svg plot'
                                 ' alongside')

        self.__args = parser.parse_args()

    @property
    def args(self):
        return self.__args

    def validate(self):
        """Arguments additional validation."""

        self.__args.title = (self.__get_casename()
                             if self.__args.title is None
                             else self.__args.title)

        self.__args.subtitle = (self.__args.file.stem
                                if self.__args.subtitle is None
                                else self.__args.subtitle)

        self.__args.logscale = (
            self.__args.logscale or self.__args.file.name == 'residuals.dat')

        return self

    def __get_casename(self) -> str:
        """Get OpenFOAM-case name if the .dat file is located in
        postProcessing/ folder.
        """

        folders = list(self.__args.file.parts)
        return (folders[folders.index('postProcessing') - 1]
                if 'postProcessing' in folders
                else None)


def plot(ax, args) -> None:
    """Draw plot."""

    load_dat(args.file, args.usecols).plot(ax=ax,
                                          title=args.subtitle,
                                          logy=args.logscale,
                                          grid=True)


def main() -> None:

    def animate(frame: int) -> None:
        ax.clear()
        plot(ax, args)

    args = ArgementsHandler().validate().args

    fig = plt.figure(figsize=(10, 6))
    fig.suptitle(args.title, fontweight='bold', fontsize=16)

    ax = fig.add_subplot()
    plot(ax, args)
    if not args.background or args.refresh:
        ani = animation.FuncAnimation(fig, animate, interval=args.refresh*1e+3)
        plt.show()
    elif args.background:
        plt.savefig(Path(args.file.parent, f'{args.file.stem}.svg'))


if __name__ == '__main__':
    main()
